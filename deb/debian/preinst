#!/bin/bash

# before install
if [ "$1" = "install" ]; then
  echo "Running pre-install steps..."

  # make sure the package is not being installed using the Homebridge UI integrated terminal
  pstree -s $$ | grep "hb-service" > /dev/null
  if [ "$?" -eq 0 ]; then
    echo
    >&2 echo "ERROR: The homebridge package must not be installed from the Homebridge UI Terminal."
    echo
    exit 1
  fi

  # remove the hb-service generated fix-permission pre-start script (fresh install only!)
  if [ -z $2 ] && [ -f /etc/hb-service/homebridge/prestart.d/10-fix-permissions ]; then
    rm -rf /etc/hb-service/homebridge/prestart.d/10-fix-permissions
  fi

  # check for existing homebridge.service 
  if [ -f /etc/systemd/system/homebridge.service ]; then
    # try and get a list of the installed plugins and create a temporary package.json that will be used to install them again in the new location
    if [ ! -f /var/lib/homebridge/package.json ] && [ -f /var/lib/homebridge/config.json ] && [ -f /var/lib/homebridge/.uix-secrets ]; then
      if systemctl is-active --quiet homebridge.service; then
        # get the ui port
        ui_port=$(cat /var/lib/homebridge/config.json | jq -rM '.platforms[] | select(.platform == "config") | .port' 2> /dev/null)
        # generate a jwt for the http request
        secret=$(cat /var/lib/homebridge/.uix-secrets | jq '.secretKey' | tr -d '"')
        header=$(echo -n '{"alg":"HS256","typ":"JWT"}' | openssl base64 -e -A | sed s/\+/-/g | sed -E s/=+$// | sed 's/\//_/g')
        payload=$(echo -n '{"username":"homebridge-apt-pkg","name":"homebridge-apt-pkg","admin":true,"instanceId":"xxxxxxxx"}' | openssl base64 -e -A | sed s/\+/-/g | sed -E s/=+$// | sed 's/\//_/g')
        signature=$(echo -n "${header}.${payload}"| openssl dgst -sha256 -hmac $secret -binary | openssl base64 -e -A | sed s/\+/-/g | sed -E s/=+$// | sed 's/\//_/g')
        token="${header}.${payload}.${signature}"
        
        # get the list of installed plugins from the running instance of the Homebridge UI
        output=""
        getPluginStatus="fail"
        for protocol in "http" "https"; do
          output=$(curl -sfk -H "Authorization: bearer ${token}" $protocol://localhost:${ui_port}/api/plugins 2> /dev/null)
          if [ "$?" = "0" ]; then
            getPluginStatus="success"
            break
          fi
        done

        if [ "$getPluginStatus" = "success" ]; then
          # build a package.json like format containing the list of plugins the user has installed
          dependencies=$(echo $output | jq -rM '. | map({(.name) : .installedVersion }) | add | del(."homebridge-config-ui-x") | del(."homebridge")')
          packageJson=$(jq ".dependencies += $dependencies" <<< '{ "dependencies": {} }')
          if [ "$?" = "0" ]; then
            pluginCount=$(echo $dependencies | jq length)
            if [ $pluginCount -gt 0 ]; then
              # save the package.json file to a temp file which will be picked up in the postinst script
              mkdir -p /tmp/homebridge-tmp
              echo $packageJson > /tmp/homebridge-tmp/package.json
            fi
          fi
        fi
      fi
    fi

    # stop homebridge.service if it is running
    if systemctl is-active --quiet homebridge.service; then
      echo "Stopping existing Homebridge service..."
      systemctl stop homebridge.service
    fi

    # disable and remove the old homebridge.service
    echo "Removing existing Homebridge service..."
    systemctl disable homebridge.service
    rm -rf /etc/systemd/system/homebridge.service
    systemctl daemon-reload
  fi

fi

# before an upgrade
if [ "$1" = "upgrade" ] && [ $2 ]; then
  echo "Running pre-upgrade steps..."

  # make sure the package is not being upgraded using the Homebridge UI integrated terminal
  pstree -s $$ | grep "hb-service" > /dev/null
  if [ "$?" -eq 0 ]; then
    echo
    >&2 echo "ERROR: The homebridge package must not be upgraded from the Homebridge UI Terminal."
    echo
    exit 1
  fi
 
  # stop homebridge.service if it is running
  if systemctl is-active --quiet homebridge.service; then
    echo "Stopping Homebridge service..."
    systemctl stop homebridge.service 2> /dev/null
  fi

  # take a copy of the existing "package.json"
  mkdir -p /tmp/homebridge-tmp
  [ -f /var/lib/homebridge/package.json ] && cp /var/lib/homebridge/package.json /tmp/homebridge-tmp/package.json

  # remove existing node_modules/homebridge and lock files
  # the postinst upgrade step will merge the new package.json with the existing one
  rm -rf /var/lib/homebridge/node_modules/homebridge
  rm -rf /var/lib/homebridge/package-lock.json
  rm -rf /var/lib/homebridge/pnpm-lock.yaml
  rm -rf /var/lib/homebridge/package.json
  rm -rf /var/lib/homebridge/.npmrc
  # cleanup node-pty-prebuilt-multiarch
  rm -rf /opt/homebridge/lib/node_modules/homebridge-config-ui-x/node_modules/node-pty-prebuilt-multiarch/build
  rm -rf /opt/homebridge/lib/node_modules/homebridge-config-ui-x/node_modules/@homebridge/node-pty-prebuilt-multiarch/build
fi

echo "Unpacking may take several minutes on low powered devices."

exit 0
